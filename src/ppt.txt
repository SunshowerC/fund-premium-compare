[toc]

# 开场白
> 个人评委早上好，我叫陈伟钰，今天很荣幸有机会来参加本次答辩。

# 个人介绍
> 1. 我本人 2017 年毕业于深圳大学
> 2. 毕业后进入乐信集团任职前端开发
> 3. 于 2018 年进入 shopee 的 finance service group .
> 4. 擅长技术：
    - 前端工程化，ci/cd，参与了前端
    - 组内 nodejs BFF 开发建设


- 入职时间
- 个人负责业务位置方向，价值
    1. devops + ci/cd 前端工程化的一部分
    2. admin BFF 体系的搭建
    3. 其他业务开发


# 监控
> 通常来说，监控服务是由 后端，或者是运维来维护或者提供方案，但是前端



1. 前端业务旧状（主动监控和被动监控）
    - 缺乏监控上报 
    - 线上发布不可监控
    - 客诉难回溯
    - 缺乏指标衡量，怎么定义这次发布是可靠的
    - 裸奔

2. 目标
    - 低成本接入
    - 
3. 核心设计
    - sdk 
    - 难点
        - 时序数据库？
        - grafana 图表？（稳妥）
    - 解决思路
    - 
4. 系统效果展示
    - grafana 图表
5. 业务成果
    上线后统计。
   - 持续为 uc, spl， cashloan, risk ，fastescrow 多个前端业务团队接入服务
   - 累计为 uc, spl 团队告警排查出 5 个大问题，18个小问题。

6. 个人能力收获总结
  - devops 能力进一步提升，多方面发展



- 单维度
- 多维监控，有利发现细分问题
- 成果
    - 日报
    - jsbridge 问题
    - android 4.4 小版本问题
    - 客诉，用户行为追踪问题
    - uc, spl， cashloan, risk ，fastescrow 接入

## 背景
1. 外部背景
    - 客诉难回溯
2. 内部背景
    - 自身代码质量 发布监控
    - 第三方业务监控，jsbridge, api 
    

## 目标
insight 监控系统

1. 解决业务侧的问题
2. 解决技术侧的问题

## 设计
流程上：
1. 采集
2. 存储
3. 处理
4. 图像应用

## 展示
1. 业务侧回溯
2. 技术侧指标监控
    - 单维度监控
    - 多维度监控
    - 三方依赖接口监控

## 效果
1. 团队内：
    1. 业务侧：客诉问题有迹可循
        - 举例说明
    2. 技术侧：防患于未然，替其他团队监控
        - android  4.4 
        - jsbridge 失败率
2. 其他团队推广
    - cashloan , uc, spl, fastescrow, risk

# admin portal

1. admin 服务旧状
    - 关联系统割裂
      - 贷前贷后
    - 登录态不共享
    - 重复开发模块（权限管理）

2. 解决问题 = admin 网关
    - 单点登录
    - 中心化一体化权限管理 - soup
    - low code 
    - 
3. 核心设计
    - 前端
        - 微前端
        - 第三方业务接入 SDK 
    - 后端
        - 单点登录 SSO 
        - 第三方业务接入 SDK 
        - 配置化接入平台管理
    
    - 展示未来（low code）
    - 难点
        - 不同应用框架场景的 sdk 
        - k8s 迁移时路由方式的变更
        - 同一个系统，双向通道访问
4. 系统效果展示
5. 业务成果
    - 成果
        - uc, spl, cashloan， fastescrow 接入
        - 业务价值
6. 个人成长


## 背景
1. 业务层面：业务隔离，关联系统割裂，
2. 开发层面：
  - 登录
  - 权限管理，soup 权限接入
  - 


## 目标
admin portal 
- 业务：一站式访问
- 开发：
    - 减少重复开发
        - 接口服务路由
        - 中心化权限管理
        - 单点登录

## 设计
### 前端
- 微前端主应用
    - 前端接入 sdk
    - 允许双通道访问

### 后端
- 网关
    - 单点登录
    - k8s svc name 路由，（http 服务）
    - 配置化接入【微服务，微前端】


## 展示


## 效果
- uc, spl, cashloan， fastescrow 接入
- 


## 规划
- lowcode，逻辑编排

 


# 个人优劣总结，未来规划
- 优势
- 劣势
- 挑战：用于挑战各方面的挑战，不局限与前端开发，以一个应用开发工程师的标准要求自己，3年来在 运维层面，服务端开发，客户端RN开发都有所涉猎，虽然和专职的 后端开发，devops 有所差距。


# 其他表现与成就
1. github ，start 800+ 
2. 公司级分享 1 次，组内分享若干次
3. 


# 结语
> 


# 参考
1. [如何写好公司级别晋升 PPT](https://www.zhihu.com/question/63442942)
2. [下周要参加公司的晋升答辩，具体应该怎么做做什么不太明白，求助各位大神？](https://www.zhihu.com/question/300739584)
3. [晋升答辩通过率提升100%的小技巧](https://zhuanlan.zhihu.com/p/136556515)
4. 


# 稿子

## 自我介绍
各位评委下午好，很荣幸能有机会来参加本次答辩。


首先让我做下自我介绍，
> ppt 个人页

我叫陈伟钰，17 年深圳大学毕业，
毕业后进入了乐信集团，
18 年加入 shopee，在 FSG 的信贷组任职前端开发。

期间个人比较侧重的技术方向是 
1. 前端工程化建设，
2. 以及 Node.js BFF 开发体系的建设。


> 转场

那么今天给大家演示的项目有两个，
分别是，
1. Insight 前端监控系统
2. 微前端 Nodejs 一体化网关系统

## insight 监控

### 背景
首先是 Insight 前端监控系统，

那么这个系统出现的背景有两方面，

从业务的背景上，   
我们存在个别的客户投诉，但我们这边又无法重现，会陷入比较尴尬的排查工作。

从开发背景上，   
第一点是，我们的前端开发质量，例如请求耗时，首页加载速度等指标，没有办法准确衡量。

第二点是，我们依赖的服务，如第三方的接口，或者是 jsbridge 的接口，没有监控接口服务的可用性。

简单来说就是，前端应用几乎处于裸奔状态。


### 目标【ppt】
基于这些背景，我们初步定了这些个目标
> 读 ppt 
1. 业务侧，我们需要做到
2. 开发侧

### 任务【ppt】
确定了目标后，我们需要对一个监控系统做任务拆分。

一个监控系统，核心其实就是 4 个步骤，
- 采集上报
- 日志存储
- 指标统计
- 数据展示

采集上报的这一块，又分为客户端的数据采集，以及服务端的数据处理
- 客户端数据采集的部分，我们使用了浏览器的 performance api ，
- 对 jsbridge， http 请求都做了拦截处理，统计其耗时指标数据
将其封装成一个 客户端使用的 sdk ，便捷使用。


毫无疑问海量的日志数据存储，以及海量指标数据统计的架构设计，是监控系统的复杂度最高的一部分，对于一个前端开发，是很难对这部分的架构设计的。

同时，也为了前后端的监控系统架构尽可能统一，所以我们对现有的资源整合利用起来，
- 日志存储接入了我们的 log platform 平台
- 指标统计，使用了 prometheus 时序数据库
- 数据展示，我们对接了 grafana 做数据大盘监控


### 设计【ppt】
在这个方案设计上，
我们也会对数据做一些二次的应用，例如定时输出日报统计数据，seatalk 告警通知等。


<!--### 难点-->
<!--Prometheus 前端指标维度太多，-->
<!--特征种类太大，-->
<!--指标爆炸-->

<!--一个请求：-->
<!--- 请求路径-->
<!--- 设备厂商，操作系统，版本号-->
<!--- app 版本，rn 版本-->
<!--- -->

<!--指标数量是以几何倍数增长的-->

<!--#### 解决方案-->



### 效果演示【ppt】

#### 调用链路
补全了前端的一环，准确地还原前端操作，到后端接口逻辑的全链路行为。


#### 监控
- 业务性能指标监控
- 多维度
- 自定义维度监控










### 案例， 接入情况【ppt】

> 案例分析

受限于开发资源，insight 麻将虽小但五张俱全，

目前 insight 前端监控这一套也已经在我们 多个金融前端团队接入使用，

但还有很多需要提升改进优化的点，今后也会陆续进行优化。




## 网关


### 背景【ppt】

#### 业务背景
随着业务的扩大，目前我们存在多个金融运营后台系统，包括 贷前，贷后，现金贷，资管，风控催收等，并且他们都存在一定关联性。

那么我们的 local 运营团队，就需要频繁地在多个系统之间来回切换，操作上比较割裂，使用上不大友好。


#### 开发背景

而对于我们开发来说，我们多个后台系统，由不同的前端团队开发维护，
每个团队都需要开发维护一套相似的逻辑，例如，登录，权限管理，水印等。


那么，在这个背景下，我们可以明确下双方的目标

### 目标【ppt】
对于业务来说，业务其实想要的很简单，就是一站式运营，在一个站点，能访问所有的金融运营后台系统。


那么对于开发来说，我们做一个一站式的系统也不难，最简单的做法就是单体架构，把所有的项目都集中到一个仓库维护，但这会导致严重的耦合，开倒车。



<!--第二种选择是，我们可以把子项目独立开发，部署时再将子仓库通过 npm 包，或者 git submodule 以子模块的形式加载进来，然后集中构建部署。这种方案类似于我们现在 RN Plugin 的中心化部署。-->
<!--缺点也很明显：子业务无法独立部署，必须跟随主应用的部署-->

所以，我们开发需要考虑通用功能的抽离之外，
还要考虑如何做到易用性，node 服务和前端服务都得允许独立开发，独立部署。

嗯，就像后端分布式微服务架构那样！

这种类似的技术，在前端层面就叫微前端技术。

> TODO: 加一页描述微前端是啥？

那么在讲我们的设计之前，我们可以先来看看原来的设计是怎么样的？
### 原设计【ppt】
原设计是前后端分离，前端和Node端都由前端开发来维护，

前端和 node 端都有重叠的一部分重叠的逻辑，
但是不同的业务都各自为政，拥有独立的域名。

就像是军阀割据一样，谁也管不了谁

也也是导致了前面我们提的一些问题。




### 新设计【ppt】
为了解决这些问题，我们尝试做了这样的设计。

#### 在前端部分
通过微前端架构，我们创建一个前端主应用，维护我们前端的通用逻辑。
在主应用内，我们将注册所有的微前端应用。每个微前端应用都运行在各自的一个沙盒里面，运行时互不影响。

主应用统领全局，子应用业务独立，但受控于主应用。

通过这种方式，实现不同前端业务的一站式访问，但又不影响子业务的独立开发部署。

相比于前面的军阀割据，这种架构更像中央集权制。

> 所有的子应用的静态资源，都由同一个域名的不同 path 请求，通过 k8s ingress 路由到对应的资源。

#### 在 Node 端部分
在 Node 端部分，我们会创建一个 API 网关，
网关维护了一些通用的逻辑， 以及对我们微前端的一些配置维护。

而所有子应用发起的接口请求，都会路由到 admin portal 网关，进行流量识别分发。接口流量路由匹配规则可以直接在 admin portal 上进行配置。支持 http 协议和 grpc protobuf 协议。

而在这里，不同的业务的 node server 都将成为一个微服务，提供业务接口。



#### 服务可降级
此外，我们还提供了个兼容的模式，接入了我们的微前端系统，并不代表原系统就无法使用了，因为系统升级到微前端架构，我们希望做到平滑过渡。

所以微前端模式支持双通道并行访问，也就是说，部署一个前端应用，你既可以访问到原版的系统，也可以访问 微服务版的系统。

例如： fastescrow 

### 业务接入【ppt】
在这个系统架构下，一个前端应用，要接入我们的这个微前端架构也很简单，

1. 前端需要接入一个插件，来让自己支持微前端。
2. 在 admin portal 管理平台上新增应用，绑定该微前端应用到 我们的平台。

通过这两步就可以将我们的应用接入到我们的微前端网关一体化架构中。

### 效果 【ppt】
截止到现在，
admin portal 已经在所有地区部署上线

已有多个业务接入，包括
UC，spl， fastescrow, cashloan ,  nebula。
后面我们也将继续对系统进行优化升级，

### 未来规划
在这个系统，我们一定程度上收拢了 node 端的一部分通用逻辑，让开发专注于业务。

但是在当前的架构下，开发依然不可避免地需要创建一个 server，进行项目的开发构建发布部署到 k8s。
这也是我们常见的 BaaS， backend as a service 架构。

但是，从 0 开始这样的一个服务开发，依然需要一定的成本。

所以我们未来的规划，会探索 nodejs 端的云函数开发，尝试实现一个轻量级的云函数功能，让开发无需创建一个新应用，即可开发一个接口，提升开发效率。

这也是我们所说了 FaaS。



## 结语
以上就是我今天演讲的所有内容，
可能还有许多不足需要改进的地方，还请各位大佬指点一下





# 修正
重点规则：
> 1. 说的话是 对 ppt 的补充。
> 2. 考虑没有前端背景，考虑听的人跟不跟得上
> 3. 方案的每一点，尽可能的有的放矢，和前文呼应。
> 4. 

监控：
1. insight + 网关调位置
2. 业务贡献
3. insight sdk 细节实现
4. insight 日志存储，指标。探索方案做出的努力，方案取舍原因。
5. insight 难点与方案 
    - 海量指标，指标查询超时
    - 方案
    - 效果
7. 阐述自己工作贡献在哪个部分
8. 行为链路监控看不清。需要放大，局部放大
9. 案例分析，详细点，每个案例一页。
    - th 激活掉 0 案例。
10. insight 规划：接入多维监控   
11. case 分析，量化分析的维度
12. 背景补充：强调当时发生了什么样的问题，如何在”很短的时间“内，充分利用现有的工具，”巧妙“的完成了任务，并且取得了”明显“的效果。



网关：
1. 业务目标，开发目标可以统筹一下
2. 为了一体化的各个方案取舍。
    - 一体化方案、单体方案
    - RN Plugin 中心化方案
    - 微前端方案
3. 架构图-微前端架构详细描述，为什么能实现

4. 接入步骤，为什么这样设计接入，优势 ppt 需要体现。
   > 简单易用，对业务无侵入性
   > 主应用 UI 管理
5. 服务可降级，兼容性访问，平滑升级，内容 ppt 阐述

6. 阐述自己工作贡献在哪个部分，虚线标出来
   > 主要的框架设计，由我开发完成
7. 难点，以及怎么解决？
   > 去中心化部署 + 兼容新老两个部分的系统访问
8. 给业务开发带来什么优势？
   > 业务：便捷使用
   > 开发：focus 业务开发。
9. FaaS 举例说明，会是怎么个使用法的
   > UI 使用操作




